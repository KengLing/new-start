	Java Script的标识符
		1.什么是标识符
			变量，函数，属性的名字，或者函数的参数。
		2.标识符的命名规则：
			（1）由字母，数字，下划线（_）或者美元符号（$）组成
			 （2） 不能以数字开头
			（3）不能用关键字开头
		语法：var变量名
		变量赋值
			声明的同时赋值：var变量名=值
			先声明后赋值：变量名=值
			一次声明多个变量，用逗号隔开，如：var，id，sex，age，name“marry”；
			省略var声明变量叫做全局变量
			不推荐省略var操作符来定义全局变量

		typeof功能：检测变量类型
			typeof变量或typeof（变量）

			console.log() 在控制台中打印
			console.log(typeo name)输出名字
			undefined 类型只有一个值 未定义的
			声明了变量但没有赋值就是undefined类型
			null值表示一个空对象指针==没东西
			说明：undefined值时派生自null值的，所以undefined==null，返回值结果是true。

		-number：表示整型和浮点型。
		-NaN：既非数值（Not a Number）是一个特殊的数值。

			1.任何涉及NaN的操作（例如NaN/10）都会返回NaN。
			2.NaN与任何值都不相等，包括NaN本身。


		isNaN（）功能：检测是否是“非数值”。

			-返回值：boolean。（对或错）
			语法：isNaN（n）
			说明：isNaN（）对接收的数值，先尝试转换为数值，在检测是否为非数值

		Number（）可以强制将任何数据类型转换为数值，此方法不常用；
		parseint（），parseFloat（）专门用于把字符串转换为数值；
	
	parseInt（）
		会忽略字符串前面的空格，直至找到第一个 非空格字符。
		说明
			1：转换空字符串返回NaN。
			2：这个函数提供第二个参数：转换时使用的基数。（既多少进制）
	parseFloat：从第一个字符串开始解析每一个字符，直至遇到一个无效的浮点数字符为止。
			1,：第一个小数有效外，parseFloat（）与parseInt（）的第二个区别在于它始终都会忽略前导的零。

	toString（）和String（）
		语法：str.toString（）
		功能：将str转换为字符串
		返回值：str的一个副本。
		str是要转换的内容，可以是数值、布尔值、对象和字符串。

		说明：在不知道要转换的值是不是undefined或null的情况下，还可以使用String( )函数，它可将任何类型的值转换为字符串。
	
	Boolean
		用于表示真假类型，既true表示真，false表示假；

	类型转换
		1，除0之外的所有数字，转换为布尔类型都为true
		2，除“ ”之外的所有字符，转换为布尔类型都为true
		3.null和undifined转换为布尔型为false

	算术操作符
・		1.++a与都是对a进行递增的操作
			区别：1.++a先递增之后的a值， a++先返回a的值原值，再返回递增之后的值
				2，递减同理。
	比较操作符
		复合赋值 += -= *= /= %=
		简化：a+=5相等于a=a+5
	
	比较操作符
		> < >= <= == === != !==
		== 相等
		=== 相等 同时比较数据类型是否相等
		！= 不相等
		！==不相等 同时比较数据类型是否相等
		返回值都是Boolean型

	三元操作符
		条件?执行代码1：执行代码2
		可代替简单的if语句
		如果条件成立，执行代码1，否则执行代码2

	逻辑操作符
		&&：与
		||：或
		！：非

		逻辑与
			&&与（只要有一个条件不成立，返回false）
			说明：在有一个操作数不是布尔值的情况，逻辑与操作符不一定返回值，此时它遵循下列规则
				1.如果第一个操作数隐式类型转换后为true，则返回第二个操作数。
				2.如果第一个操作数隐式类型转换后为false，则返回第第一・个操作数。
					说明：一般是有两个操作数的情况下。
				3.第一个数null//返回null
				4第一个数NaN//返回NaN
				5.第一个数undefined//返回undefined
		
		逻辑或
			||或（只要有一个条件成立，返回true）
				1.如果第一个操作数隐式类型转换后为true，则返回第二个操作数。
				2.如果第一个操作数隐式类型转换后为false，则返回第第一・个操作数。
				3.第二个数null//返回null
				4第二个数NaN//返回NaN
				5.第二个数undefined//返回undefined

		逻辑非
			！非（无论操作数是什么类型，逻辑非返回都是布尔类型）
				1.! ！同时使用两个逻辑非操作符时：
					-第一个逻辑非操作符会基于无论什么操作数返回一个布尔值
					-第二个逻辑非则对布尔值求反	


			if语句
				alert：弹出对话框
					语法：alert（）
				promot：弹出输入框
					语法：promot（）
						返回值：
							1、点击确定，返回输入内容
							2、点击取消，返回null
							3、alert()的应用

				lenght
					语法：string.length
					功能：获取string字符串的长度
					返回值：number
			
				函数
					可以封装多个语句，可以在任何地方调用
					使用funcition的声明.

				任何函数通过return语句，后面跟着返回的值来实现返回值。
					说明：
						1.函数执行完return语句后之后立刻停止并立刻退出

						2.return语句也可以不带任何返回值，用于提前停止函数执行不需要返回值得情况。

					arguments
						1.aguments对象只是数组类似，并不是数组实例；
						2.[]语法访问他的每一个元素；
						3.length属性确定传递参数的个数；	

					如何创建数组
						创建数组的基本方法有两种：
							1.使用Array构造函数	
								语法：new Array（）
								小括号说明：
										（1）预先知道数组要保存・的项目数量
										（2）向Array构造函数中传递数组应包含递的项
							2、使用数组字面量表示法
						
						数组的length，永远等于最后一个索引+1；

						push
							语法：arrayObject.push(newele1,newele2,newX)
							功能：把它的参数顺序添加到arrayObject的尾部
							返回值：把指定的值添加到数组后的新长度。

						unshift()把值添加到数组前面；
						pop()删除数组最后的元素；
						shift()删除数组的第一个；
						他们两个都能返回被删的值

						reverse()
							可颠倒数组，该方法会改变原来的数组，而不会创建新数组
						sort（）
							语法：arrayObject.sort（sortby）
							功能：用于数组的元素进行排序。
							返回值：数组
							说明：
								1.即使数组的每一个项都是数组，sort（）的方法比较的也是字符串。
								2.sort（）方法可以接收一个数作为参数。
						concat（）
							用于连接两个或者多个数组。
						
						slice()
							语法：arrayObject.slice(start,end)
							功能：从已有的数组中返回选定的元素
								start（必选）规定从何处开始选取，如是负数，从尾部开始算
								end（可选）规定从结束选取，是数组结束处的数组的下标


					《删除》
						语法：arrayObject.splice(index,count)
						功能：删除从index处开始的零哥哥或多个元素。
						返回值：含有被删的元素的数组。
						说明：
							count是要删除的项目数量，如果设置为0，则不会删除项目。
							如果不设置，则删除从index开始的所有值。
					《插入》
						语法：splice(index,0,item0,item1....itemX)
						功能：插入一个或多个元素
						参数：index为第一个插入元素被插入后在数组中的索引，效果就是在原数组索引为index的元素前插入这些元素
						返回值：空(数组)
					《替换》
						语法：splice(index,count,item1,item2.....itemX)
						功能：在指定位置插入元素，并删除任意数量的项
						参数：index为起始位置，count眼删除的项数，item1....itemX为要插入的项
						返回值：被删除的元素组成的数组

				indexOf
					用于查找某个值的位置
					语法：arr.indexOf(searchvalue, startIndex)
					功能：从数组的开头（位置0）开始向后查找
					参数:
						-searchvalue：必选，要查找的项
						-startIndex：可选，指定索引位置开始向后查找
						返回值：查找的项在数组中的位置，没有找到返回-1

				lastIndexOf方法
					功能：从数组末尾查找

				charAt
					语法：stringObject.charAt(index)
					参数：index 必需。表示字符串中某个位置的数字，即字符在字符串中的位置。
					返回值：String 返回在指定位置的字符。

				charCodeAt 
					以编码形式返回

				indexOf	
					indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。
					说明：如果没有找到匹配的字符串则返回 -1。

				lastIndexOf（）
					语法：stringObject.lastIndexOf("o")
					功能：从一个字符串中搜索给定的子字符串，返回子字符串的位置。
					返回值：数值。
					说明：如果没有找到该字符串，则返回-1.

				slice
					语法：stringObject.slice(start,end)
					功能：截取子字符串
					参数说明：
						1.start：必需，指定子字符串的开始位置。
						2.end：可选，表示子字符串到哪里结束，end本身不在截取范围之内，省略时截取至字符串的末尾。
						3.当参数为负数时，会将传入的负值与字符串的长度相加

				substring（）
					语法其功能与slice（）完全一样
					区别：
						1.当参赛为负数时，自动将参数转换为0
						2.substring（）会将较小的数作为开始的位置，将较大的数作为结束位置。
				substr（）
					语法：stringObject.substr(start,len)
					功能：截取子字符串。
					参数说明：
					1.start：必需，指定子字符串的开始位置。
					2.len:可选，表示截取的字符总数，省略时截取至字符串的末尾。
					3.当len为负数，返回空字符串。

				split（）
					语法：stringObject.split（separator）
					功能：把一个字符串分割成字符串数组。
					返回值：Array
					说明：separator：必需，分隔符 
		
				replace（）
					语法：stringObject.repace(regexp/substr,replacement)
					功能：在字符串中用另外一些字符替换另一些字符，或者替换一个与正则表达式匹配的子串
					返回值：String
					参数：
						regexp：必需。规定子字符串或要替换的模式的ReGExp对象
						replacement：：必需。一个字符串值。

				String.toUpperCase()
						全部转换为大写
				stringObj.toLowerCase()
						全部转为小写
				注意：都不修改原字符串 

			Math对象的方法
				Math.min(x)返回最小值。
				Math.max(x)返回最大值。
				Max.ceil(x)向上取整。
				Math.floor(x)向下取整。
				Math.round(x)四舍五入。
				Math.abs(x)返回绝对值。
			注意：如果中含有NaN，则返回NaN;若含有如“123”，则会先强制转换为123再进行运算
		
			Math.random()
				功能：
					返回值大于dengyu0小于1的一个随机数。
					返回值：Number。

		获取年月日时分秒及星期的方法
			new Date（）：功能：创建一个日期时间对象。
				new Date(年,月,日,时,分,秒)中间用逗号隔开，时分秒可省略
			1.getFullYear（）：返回4位数的年份
			2.getMonth（）：返回日期中的月份，返回值为0-11
			3.getDate（）：返回月份中的天数
			4.getDay（）返回星期，返回值为0-6
			5.getHours（）返回小时
			6.getMinutes（）返回分
			7.getSeconds（）返回秒
			8.getTime（）返回表示日期的毫秒数

		设置年月日时分秒及星期的方法
			1.setFullYear（year）：设置4位数的年份
			2.setMonth(mon):返回日期中的月份，从0开始，0表示1月。
			3.setDate（）设置日期
			4.setHours（）设置小时
			5.setMinutes（）设置分
			6.setSeconds（）	设置秒			
			7.setTime	（）	以毫秒设置日期，会改变整个日期	

		DOM查找方法
			document.getElementById
					语法：document.getElementById("id")
					功能：返回对拥有指定ID的第一个对象的引用
					返回值：DOM对象
				
			document.getElementsByTagName（"tag"）
				功能：返回一个对所有tag标签引用的集合
				返回值：数组
				说明：tag为要获取的标签名称

			设置元素样式
				语法：ele.style.styleName=styleValue
				功能：设置ele元素css的样式
				说明：
					1.ele为设置样式的DOM对象
					2.styleName为设置的样式的名称
					3.styleValue为设置样式的值

				ele.innerHTML是获取和设置开始和结束标签之间的html内容；
				ele.className是获取或者设置元素的class属性，如果原来有class，就会被替换掉；

			获取属性
				语法：ele.getAttribute("attribute")
				功能：获取ele元素的attribute属性
				说明：
					1.ele是操作的dom对象
					2.attribute是获取的html属性（如：id，type）

			设置属性
				语法：ele.setAttribute("attribute",value)
				说明：value为设置的attribute属性的值

			删除属性
				语法:ele.removeAttribute("attribute")
				功能：删除ele上的attribute属性
					attribute是删除的名称




			鼠标事件
				-onload：页面加载时触发
				-onclick：鼠标点击时触发
				-onmouseover：鼠标滑动时触发
				-onmouseout：鼠标离开时触发
				-onfoucs：获取焦点时触发
				-onblur：失去焦点时触发
				-onchange：域的内容改变时发生
			关于this指向：在事件触发的函数中，this是对该dom对象的引用
		

			DOM 0事件
				语法：ele.事件=执行脚本
				功能：在DOM对象上绑定事件
				说明：执行脚本可以是一个匿名函数，也可以一个函数的调用

			不建议使用HTML事件原因
				1.多元素绑定相同事件时，效率低
				2,。不建议在HTML元素中写，JavaScript代码

			鼠标事件
				-onsubmit：表单的确认按钮被点击时发生
				-onmposedwn：鼠标按钮在元素上按下触发
				-onmousemove：在鼠标指针移动时发发生
				-onmouseup：当元素上松开鼠标按钮时触发
				-onresize：当浏览器窗口的大小时触发
				-onscroll：拖动滚动条滚动时触发

			键盘事件与keyCode属性
				onkeydown：在用户按下一个键盘时发生
				onkeypress：在按下键盘时发生（只响应字母和数字符号）
				onkeyup：在键盘被松开时发生
				keyCode：返回onkeypress，onkeydwn或onkeyup事件触发的键的值字符代码，或键的代码



			什么是BOM
				BOM（browser object  model）浏览器对象模型

			Window对象的方法
				语法：window.alert("content")
				功能：显示带有一段消息和一个确定按钮的警告框

				语法语法：window.confirm（“message”）
				功能：显示一个带有指定消息和OK及取消按钮的对话框
				说明：用户确定按钮，返回true，取消按钮返回flase


				语法：window.prompt("text,defaultText")
				参数说明：
					text：要在对话框显示的纯文本（而不是HTML的格式文本）
					defaultText默认的输入文本
					返回值：取消按钮，返回null，确定按钮返回输入字段当前显示的文本

				语法：window.open(pageURL,name,parmeters)
				功能：打开一个新的浏览器窗口或查找一个已命名的窗口
				参数说明：
					pageURL：子窗口路径
					name：子窗口句柄（neme声明新的窗口的名称，方便后期通过name对于子窗口的引用）
					parameters：窗口参数（各参数用逗号分隔）

				语法：window.close（）
					用于关闭浏览器子窗口	

			超时调用
				语法：setTimeout（code，millisec）
				功能：在指定的毫秒数后调用或计算表达
				参数说明：
					1.code：要调用的函数或要执行的JavaScript
					2.millisec：在执行代码前需等待的毫秒数

			清除超时调用
				语法：clearTimeout（id_of_setttimeout）
				功能：取消由setTimeout（）方法设置的timeout
				参数说明：
					1.id_of_setttimeout：由setTimeout（）返回的ID值，该值标识要取消的延迟执行代码块		
	
			清除间歇调用
				语法：clearInterval(id_of_setinterval)
				参数说明：
					id_of_setinterval 调用 setInterval() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setInterval() 所设定的定时执行操作。

				返回值：没有返回值。

			location：location.hash
				功能：返回当前加载页面的完整URL
				说明：location.href与window.location.href等价

			location对象的常用
				语法：location.hast
				功能：返回服务器名称和端口号（如果有）

				语法：location.hostname
				功能：返回不带端口的服务器名称。

				语法：location.pathname
				功能：返回URL中的目录和（或）文件名
					
				语法：location.port
				功能：返回URL中指定的端口号，如果没有，返回空字符
	
				语法：location.protocol
				功能：返回页面使用的协议
	
				语法：location.search
				功能：返回URL的查询字符串。这个字符串以问号开头

		location.href=('网页地址') 会自动留下历史记录，浏览器后退键返回

		location.replace(url)
				功能：重新定义向URL。
				说明：使用location.replace不会再浏览器中生成新记录
		location.reload()
				功能：重新加载当前显示的页面
				说明
					location.reload（）有可能从缓存中加载
					location.reload（true）从服务器重新加载
					注意：一般写在代码最后一行

		History历史对象
			语法：history.back（）
			功能：回到历史记录的上一步
			说明：相当于使用了history.go（-1）

		history.forward（）
			功能：回到历史记录的下一步
			说明：相当于使用了history.go(1)
		history.go(-n)
			功能：回到历史记录的前n步 
		
		Screen属性对象
			screen.avaiWidth/screen.availHeight获取屏幕的宽高
			window.innerWidth/window.innerHeight获取文档显示区的宽高

		Navigator对象
			UserAgent：用来识别浏览器名称，版本，引擎以及操作系统等信息的内容